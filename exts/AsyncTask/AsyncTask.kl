/** 
  This extension implements a simple async task mechanism
*/

/** This is the base interface of the task mechanism.  It defines the
  functionality that may be provided by an implementation of task, but
  does not guarantee this functionality exists.

  It is recommended to derive from AsyncTask (see below) instead, as it
  implements some of the basic functionality defined here

  usage:
    Derive from AsyncTask, and implement doTask to do your background task.
    To start your task, create an instance of your class and pass it
    to the doAsyncTask function
   */
interface AsyncTask_ {
    //
    // This function will be called from a background thread, and should be used to 
    // do any processing 
    doTask!(Data cb_data);

    // This function can optionally be implemented to return the percentage complete
    // of the current task.  it should return values between 0 and 100
    Float32 percentComplete();

    // TODO:
    requestCancel();

    // Call this function to block the calling thread until this task is complete
    Boolean join(Float32 timeout/*=0*/);

    // Return's true if the doTask function has completed
    Boolean complete();
};

/** This implementation takes care of most of the simple details
  implementing AsynTask. Clients should subclass this class and implement 
  doTask to do their actual work item

  Clients still need to implement the following functionality:
    doTask (and set class variable percentage)
    requestCancel
   */
object AsyncTask : AsyncTask_ {
  // Thread handle (used internally)
  private Data _threadHandle;
  // Cached variable will be updated when task is complete
  private Boolean complete;
  // Clients can update this variable to reflect progress in doTask
  protected Float32 percentage;
};

// Clients must implement this function 
AsyncTask.doTask!(Data data) { throw('Task not implemented'); }

// Clients should update the percentage completion of the current task 
Float32 AsyncTask.percentComplete() { return this.percentage; }

// Returns true if the task has completed, else false.
Boolean AsyncTask.complete() { return this.complete; }

AsyncTask.requestCancel() { throw('Cancel not implemented'); }

// Performs an wait while waiting for the task to finish
// returns true if the task successfully finished, false
// if it timed out.  
// \param timeout the maximum length of time to wait for the
// task to finish.  If the task cannot be completed in this time,
// the thread will be killed?  Er... maybe not?
function Boolean AsyncTask.join(Float32 timeout/*=0*/) = '_fe_AsyncTaskJoin';

// Call this function to begin an async thread task.
// Returns the C++11 handle to the thread.
function Data doAsyncTask(Ref<AsyncTask_> task, Data data) = '_fe_doAsyncTask_';
function Data doAsyncTask(Ref<AsyncTask> task, Data data) = '_fe_doAsyncTask';
